cmake_minimum_required (VERSION 3.0)

project(hoge)

if (APPLE)
    add_definitions(-Wno-deprecated-declarations)
endif()

link_libraries(m)
add_compile_options(-Ofast -Wall -Wno-unused-result)

find_package(OpenGL REQUIRED)
find_package(GLUT REQUIRED)

set(INCLUDE_DIRS ${OPENGL_INCLUDE_DIR} ${GLUT_INCLUDE_DIR})
set(LIBRARIES ${OPENGL_LIBRARIES} ${GLUT_LIBRARIES})
include_directories(${INCLUDE_DIRS})

# websocket (takuto)
FILE(GLOB ws_api_files websocket/ws_api/*.c)
add_library(ws_api SHARED ${ws_api_files})
target_include_directories(ws_api PRIVATE websocket/ws_api/)
if (APPLE)
    target_link_libraries(ws_api PRIVATE pthread)
else()
    target_link_libraries(ws_api PRIVATE pthread ssl)
endif()
target_link_libraries(ws_api PRIVATE pthread ssl)
target_compile_options(ws_api PRIVATE -Wno-format-truncation -Wno-stringop-overflow -Wno-stringop-truncation -Wno-pointer-sign)
FILE(GLOB websocket_files websocket/*.c)
add_library(websocket SHARED ${websocket_files})
target_include_directories(websocket PRIVATE websocket/)
target_link_libraries(websocket PRIVATE ws_api)
target_compile_options(websocket PRIVATE -Wno-incompatible-pointer-types -Wno-stringop-truncation)
target_compile_definitions(websocket PRIVATE MYSERVER=1) # connect to localhost

FILE(GLOB characterchange_files characterchange/*.c)
add_library(characterchange SHARED ${characterchange_files})
target_link_libraries(characterchange PRIVATE ${LIBRARIES})
target_include_directories(characterchange PRIVATE characterchange/)
target_include_directories(characterchange PRIVATE ${CMAKE_CURRENT_SOURCE_DIR})

FILE(GLOB object_files object/*.c)
add_library(object SHARED ${object_files})
target_link_libraries(object PRIVATE ${LIBRARIES} characters)
target_include_directories(object PRIVATE object/)
target_include_directories(object PRIVATE ${CMAKE_CURRENT_SOURCE_DIR})

FILE(GLOB Bullet_files Bullet/*.c)
add_library(Bullet SHARED ${Bullet_files})
target_link_libraries(Bullet PRIVATE ${LIBRARIES} websocket object)
target_include_directories(Bullet PRIVATE Bullet/)
target_include_directories(Bullet PRIVATE ${CMAKE_CURRENT_SOURCE_DIR})

FILE(GLOB characters_files characters/*.c)
add_library(characters SHARED ${characters_files})
target_link_libraries(characters PRIVATE ${LIBRARIES})
target_include_directories(characters PRIVATE characters/)
target_include_directories(characters PRIVATE ${CMAKE_CURRENT_SOURCE_DIR})

FILE(GLOB Wall_files Wall/*.c)
add_library(Wall SHARED ${Wall_files})
target_link_libraries(Wall PRIVATE ${LIBRARIES} Bullet websocket object)
target_include_directories(Wall PRIVATE Wall/)
target_include_directories(Wall PRIVATE ${CMAKE_CURRENT_SOURCE_DIR})

# player (yoshie)
FILE(GLOB player_files Player/*.c)
add_library(player SHARED ${player_files})
target_link_libraries(player PRIVATE ${LIBRARIES} websocket Wall object Bullet)
target_include_directories(player PRIVATE Player/)
target_include_directories(player PRIVATE ${CMAKE_CURRENT_SOURCE_DIR})

FILE(GLOB fps_files fpsControl/*.c)
add_library(fps SHARED ${fps_files})
target_link_libraries(fps PRIVATE ${LIBRARIES})
target_include_directories(fps PRIVATE fpsControl/)
target_include_directories(fps PRIVATE ${CMAKE_CURRENT_SOURCE_DIR})

FILE(GLOB texture_files texture20/*.c)
add_library(texture SHARED ${texture_files})
target_link_libraries(texture PRIVATE ${LIBRARIES} pthread)
target_include_directories(texture PRIVATE texture20/)
target_include_directories(texture PRIVATE ${CMAKE_CURRENT_SOURCE_DIR})

add_executable(main main.c)
# add_executable(main takuto.c)
target_link_libraries(main PRIVATE characters texture fps object websocket player Wall Bullet characterchange)
target_link_libraries(main PRIVATE ${LIBRARIES} pthread)
target_include_directories(main PRIVATE ${CMAKE_CURRENT_SOURCE_DIR})
target_compile_options(main PRIVATE -Wno-incompatible-pointer-types)
